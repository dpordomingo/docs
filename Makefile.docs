# Default shell
SHELL := /bin/bash

# internal values
landing_path := $(SHARED_PATH)/.landing
boilerplate_path := $(SHARED_PATH)/.landing.boilerplate
src_categories_yml := $(landing_path)/hugo/data/categories.yml
src_project_tpl := ./assets/templates/project.yml.tpl
src_landing_hugo := ./assets/site
examples_md_path := $(DESTINATION_PATH)/hugo/content/examples
output_raw := $(DESTINATION_PATH)/hugo/content/raw
output_yml := $(DESTINATION_PATH)/hugo/data/project.yml
project_yml_generator := $(SHARED_PATH)/.docs/bin/config
examples_md_parser := $(SHARED_PATH)/.docs/bin/examples

ifdef SOURCES
  output_tmp = $(SOURCES)/.doc-site-sources-$(VERSION_NAME)
else
  output_tmp = $(boilerplate_path)-doc-site-sources
endif
output_tmp_yml = $(output_tmp)/hugo/data/project.yml

define create-ancestors
	$(call reset-directory, $(1))
	$(REMOVE) $(1)
endef

define reset-directory
	$(REMOVE) $(1)
	$(MKDIR) $(1)
endef

define copy-directory
	$(call create-ancestors, $(2))
	$(COPY) $(1) $(2)
endef

# Fetch the LANDING_REPO into landing_path
$(landing_path):
	git clone --quiet --depth 1 $(LANDING_REPO) $(landing_path);

# Prepares src_categories_yml
$(src_categories_yml): $(landing_path)

# Prepares the config parser
$(project_yml_generator): build-config-parser

# Prepares the examples parser
$(examples_md_parser): build-examples-parser

sections_to_clean := home careers manifesto projects team
# Creates a landing-like boilerplate with compiled dependencies
$(boilerplate_path): $(landing_path)
	# creates the boilerplate folder from the landing:master
	$(call copy-directory, $(landing_path), $(boilerplate_path))
	# fills the boilerplate with the documentation assets
	$(COPY) $(src_landing_hugo)/* $(boilerplate_path);
	# removes the landing-only stuff
	@for section in $(sections_to_clean) ;\
	do \
		$(REMOVE) $(boilerplate_path)/hugo/content/$${section}.md; \
		$(REMOVE) $(boilerplate_path)/hugo/layouts/partials/$${section}; \
		$(REMOVE) $(boilerplate_path)/hugo/layouts/$${section}; \
		$(REMOVE) $(boilerplate_path)/hugo/data/$${section}; \
		$(REMOVE) $(boilerplate_path)/hugo/data/$${section}.yml; \
	done;
	# compile the boilerplate dependencies
	$(MAKE) -C $(boilerplate_path) project-dependencies
	# removes the boilerplate dependencies sources
	$(REMOVE) \
		$(boilerplate_path)/package.json \
		$(boilerplate_path)/webpack.config.js \
		$(boilerplate_path)/src \
		$(boilerplate_path)/node_modules;

# Imports documentation from an external project
import-documentation: $(src_categories_yml) $(project_yml_generator) $(examples_md_parser)
ifdef SOURCES
	$(COPY) $(SOURCES)/README.md $(output_raw)
	$(COPY) $(SOURCES)/LICENSE $(output_raw)
	@if [[ -d $(SOURCES)/_tutorials ]]; then \
		$(COPY) $(SOURCES)/_tutorials/* $(output_raw)/documentation/tutorials/; \
	fi;
	@if [[ -d $(SOURCES)/_examples ]]; then \
		$(MKDIR) $(examples_md_path); \
		$(COPY) $(SOURCES)/_examples/* $(examples_md_path)/; \
		$(examples_md_parser) -sources=$(examples_md_path); \
	fi;
	$(project_yml_generator) -tpl=$(src_project_tpl) -readme=$(SOURCES)/README.md -categories=$(src_categories_yml) > $(output_yml)
endif

# prepares the site sources from the boilerplate and the project contents
prepare-site-sources: $(boilerplate_path)
	# prepares temporary output based in the boilerplate
	$(call copy-directory, $(boilerplate_path), $(output_tmp))
	# fill the temporary output with the SOURCES documentation
	$(MAKE) import-documentation DESTINATION_PATH=$(output_tmp)
	# generate errors if necessary
	@if [[ -z "$(SOURCES)" ]]; then \
		echo '---> generating errors'; \
		echo 'baseURL: "/"' > $(output_tmp_yml); \
	fi;

# compile the site from the site sources
ifeq ($(MODE), sources)
compile-site:
	@echo '---> MODE=sources Compilation skipped';
else
compile-site:
	# buld the hugo site
	$(MAKE) -C $(output_tmp) hugo-build DESTINATION=$(output_tmp)/public LANDING_URL=$(LANDING_URL)
	# move the generated hugo site into the DESTINATION_PATH
	$(call reset-directory, $(DESTINATION_PATH))
	$(MOVE) $(output_tmp)/public/* $(DESTINATION_PATH)
	$(REMOVE) $(output_tmp)
endif

# Generates a documentation site from a boilerplate
docs-site: prepare-site-sources compile-site

# serve the generated site if the MODE var is "serve"
docs-serve:
	@if [[ "$(MODE)" = "serve" ]]; then \
		cd $(DESTINATION_PATH); \
		caddy -port $(PORT); \
	fi;
